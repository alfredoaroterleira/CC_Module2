head(correo_texto)
css_correo="a"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="span"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="span"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="span id"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="span id="
correo_html <- html_nodes(pagina_web,css_correo)
css_correo="a"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="a href"
css_correo="a href"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="a href="
correo_html <- html_nodes(pagina_web,css_correo)
css_correo="'a href='"
correo_html <- html_nodes(pagina_web,css_correo)
css_correo="span#cloak"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="cloakb7dac67f58137a988a3855d2b1ea180c"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
head(correo_texto)
css_correo="id"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="id"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="#cloak"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="ID"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="a[href^="mailto:"] {
css_correo <- '[href^="mailto:"]'
# Extraer los nodos HTML que coinciden con el selector
correo_html <- html_nodes(pagina_web, css_correo)
# Extraer el texto de esos nodos (las direcciones de correo)
correo_texto <- html_text(correo_html)
# Mostrar los primeros resultados
head(correo_texto)
View(correo_html)
library(rvest)
library(stringr)
# Definir el selector CSS para capturar enlaces con "mailto"
css_correo <- '[href^="mailto:"]'
# Extraer los nodos HTML que coinciden con el selector
correo_html <- html_nodes(pagina_web, css_correo)
# Extraer el texto de esos nodos (las direcciones de correo)
correo_texto <- html_text(correo_html)
# Limpiar el texto eliminando saltos de línea, espacios y caracteres adicionales
correo_texto_limpio <- str_trim(correo_texto)
# Mostrar los primeros resultados limpios
head(correo_texto_limpio)
css_correo <- 'span a[href^="mailto:"]'
# Extraer los nodos <a> que contienen el correo electrónico
correo_html <- html_nodes(pagina_web, css_correo)
# Extraer el valor del atributo 'href', que contiene el enlace 'mailto'
correo_href <- html_attr(correo_html, "href")
# Limpiar el 'mailto:' para dejar solo las direcciones de correo
correos <- gsub("mailto:", "", correo_href)
# Mostrar las direcciones de correo electrónico extraídas
correos
# URL de la página web
url <- "https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
# Leer el HTML de la página web
pagina_web <- read_html(url)
# Seleccionar el elemento span con el ID específico
css_span <- "#cloak62b3a0aaba708c52a1a1e5a320578d38"
span_html <- html_node(pagina_web, css_span)
# Extraer el enlace (href) dentro del span
enlace_html <- html_node(span_html, "a")
enlace_texto <- html_attr(enlace_html, "href")
# Mostrar el enlace
print(enlace_texto)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_correo="html body div.rc-article div.container-xl div.row div#rightside.col-md-10.col-sm-9 div.item-page div ul.espaciado li span#cloak078994eaff843fce63be82369f09d630 a" # contenemos la clase CSS en un objeto
nombre_correo <- html_nodes(pagina_web,css_correo) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_correo <- html_text(nombre_correo)
head(nombre_correo) #vemos los datos
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_correo="#cloak5410bb5b2489aeb9937efe4f7f8d9c37 > a:nth-child(1)" # contenemos la clase CSS en un objeto
nombre_correo <- html_nodes(pagina_web,css_correo) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_correo <- html_text(nombre_correo)
head(nombre_correo) #vemos los datos
###2
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong" # contenemos la clase CSS en un objeto
nombre_html <- html_nodes(pagina_web,css_nombre) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_texto <- html_text(nombre_html)
head(nombre_texto) #vemos los datos
###2
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong" # contenemos la clase CSS en un objeto
nombre_html <- html_nodes(pagina_web,css_nombre) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_texto <- html_text(nombre_html)
head(nombre_texto) #vemos los datos
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong" # contenemos la clase CSS en un objeto
nombre_html <- html_nodes(pagina_web,css_nombre) # con html_nodes y html_text, obtenemos el código html que contiene los países
nombre_texto <- html_text(nombre_html)
head(nombre_texto) #vemos los datos
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_nombre="STRONG"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_nombre=strong
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_nombre='strong'
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_nombre="p strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="p strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="p strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
library(rvest)
url="https://www.bcrp.gob.pe/transparencia/datos-generales/directorio/funcionarios.html"
pagina_web=read_html(url)
css_nombre="strong"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_correo="a"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
css_correo="href"
correo_html <- html_nodes(pagina_web,css_correo)
correo_texto <- html_text(correo_html)
head(correo_texto)
head(correo_texto)
rm(list = ls())
install.packages("htmltab")
library(htmltab)
rm(list = ls())
install.packages("htmltab")
install.packages("Rtools")
library(htmltab)
install.packages("htmltab")
rm(list = ls())
install.packages("htmltab")
install.packages("Rtools")
library(htmltab)
rm(list = ls())
install.packages("htmltab")
install.packages("Rtools")
library(htmltab)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
rm(list = ls())
install.packages("htmltab")
install.packages("Rtools")
library(htmltab)
rm(list = ls())
install.packages("htmltab")
install.packages("Rtools")
library(htmltab)
Sys.which("make")
rm(list = ls())
install.packages("htmltab")
install.packages("Rtools")
library(htmltab)
Sys.which("make")
install.packages("devtools")
library(devtools)
install_github("crubba/htmltab")
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[4]/tbody')
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[4]/div/table/tbody')
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
#error con demo, utilizamos rvest
install.packages("rvest")
library(rvest)
url_demo <- "https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia"
demo_page <- read_html(url_demo)
demo <- demo_page %>%
html_elements("table") %>%
.[[1]] %>%
html_table()
View(demo)
rm(list = ls())
library(htmltab)
# links
WhereIDH=list(page="https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_por_%C3%ADndice_de_desarrollo_humano",
xpath='//*[@id="mw-content-text"]/div[1]/table[4]/tbody')
WhereDEMO=list(page="https://es.wikipedia.org/wiki/%C3%8Dndice_de_democracia",
xpath='//*[@id="mw-content-text"]/div[1]/div[9]')
#carga
idh  = htmltab(doc = WhereIDH$page,
which  = WhereIDH$xpath,
encoding = "UTF-8")
demo  = htmltab(doc = WhereDEMO$page,
which  = WhereDEMO$xpath,
encoding = "UTF-8")
View(demo)
library(rio)
d_2018 = import("diputados_2018.xlsx")
library(tidyverse)
library(forcats)
library(ggparliament)
library(ggplot2)
library(dplyr)
library(magrittr)
# Usamos la columna 'PARTIDO' para crear la columna de agrupación de partidos
d_2018 %>%
mutate(party_groups = PARTIDO) -> mi_data_lump_count
# Contamos la cantidad de diputados por partido
mi_data_lump_count %>%
group_by(party_groups) %>%
summarise(n = sum(DIPUTADOS)) %>%
arrange(desc(n)) -> mi_data_count
# Asignamos colores a los partidos
mi_data_count %<>%
mutate(party_color = case_when(
party_groups == "MORENA" ~ "#9E1B32",
party_groups == "PAN" ~ "#1E88E5",
party_groups == "PRI" ~ "#004D2C",
party_groups == "PT" ~ "#D32F2F",
party_groups == "MC" ~ "#FF9800",
party_groups == "PE" ~ "#9C27B0",
party_groups == "PRD" ~ "#FFEB3B",
party_groups == "PV" ~ "#4CAF50",
party_groups == "SP" ~ "#757575"
))
# Creamos una nueva columna para la leyenda con los nombres de los partidos y los diputados entre paréntesis
mi_data_count <- mi_data_count %>%
mutate(legend_label = paste(party_groups, "(", n, " diputados)", sep = ""))
# Preparar los datos para el gráfico (escalado para gráfico semicircular)
mi_data_coord <- parliament_data(
election_data = mi_data_count,
type = "semicircle",
parl_rows = 10,  # Número de escaños por columna
party_seats = mi_data_count$n
)
# Crear el gráfico
mi_data_plot <- mi_data_coord %>%
ggplot(aes(x = x, y = y, colour = party_groups)) +
geom_parliament_seats(size = 3) +  # Tamaño de las bolas
ggtitle("Cámara de Diputados México (2018-2021)") +
coord_fixed() +  # Mantener la proporción correcta
theme_void() +   # Eliminamos ejes, texto y fondos no deseados
theme(
text = element_text(size = 11), # Ajustar tamaño del texto
legend.title = element_blank(),
plot.title = element_text(hjust = 0.3, size = 20), # Centrar título
plot.margin = margin(1, 1, 1, 1, "cm") # Márgenes
) +
scale_colour_manual(
values = mi_data_count$party_color,
limits = mi_data_count$party_groups,
labels = mi_data_count$legend_label  # Aquí agregamos los nombres de los partidos con la cantidad de diputados
) +
guides(colour = guide_legend(title = "Partidos"))  # Título de la leyenda
print(mi_data_plot)
library(tidyverse)
library(forcats)
library(ggparliament)
library(ggplot2)
library(dplyr)
library(magrittr)
# Usamos la columna 'PARTIDO' para crear la columna de agrupación de partidos
d_2018 %>%
mutate(party_groups = PARTIDO) -> mi_data_lump_count
# Contamos la cantidad de diputados por partido
mi_data_lump_count %>%
group_by(party_groups) %>%
summarise(n = sum(DIPUTADOS)) %>%
arrange(desc(n)) -> mi_data_count
# Asignamos colores a los partidos
mi_data_count %<>%
mutate(party_color = case_when(
party_groups == "MORENA" ~ "#9E1B32",
party_groups == "PAN" ~ "#1E88E5",
party_groups == "PRI" ~ "#004D2C",
party_groups == "PT" ~ "#D32F2F",
party_groups == "MC" ~ "#FF9800",
party_groups == "PE" ~ "#9C27B0",
party_groups == "PRD" ~ "#FFEB3B",
party_groups == "PV" ~ "#4CAF50",
party_groups == "SP" ~ "#757575"
))
# Creamos una nueva columna para la leyenda con los nombres de los partidos y los diputados entre paréntesis
mi_data_count <- mi_data_count %>%
mutate(legend_label = paste(party_groups, "(", n, " diputados)", sep = ""))
# Preparar los datos para el gráfico (escalado para gráfico semicircular)
mi_data_coord <- parliament_data(
election_data = mi_data_count,
type = "semicircle",
parl_rows = 10,  # Número de escaños por columna
party_seats = mi_data_count$n
)
# Crear el gráfico
mi_data_plot <- mi_data_coord %>%
ggplot(aes(x = x, y = y, colour = party_groups)) +
geom_parliament_seats(size = 3) +  # Tamaño de las bolas
ggtitle("Cámara de Diputados México (2018-2021)") +
coord_fixed() +  # Mantener la proporción correcta
theme_void() +   # Eliminamos ejes, texto y fondos no deseados
theme(
text = element_text(size = 11), # Ajustar tamaño del texto
legend.title = element_blank(),
plot.title = element_text(hjust = 0.3, size = 20, face = "bold"), # Centrar título
plot.margin = margin(1, 1, 1, 1, "cm") # Márgenes
) +
scale_colour_manual(
values = mi_data_count$party_color,
limits = mi_data_count$party_groups,
labels = mi_data_count$legend_label  # Aquí agregamos los nombres de los partidos con la cantidad de diputados
) +
guides(colour = guide_legend(title = "Partidos"))  # Título de la leyenda
print(mi_data_plot)
ggsave("grafico_2018.png", plot = mi_data_plot, width = 10, height = 7, dpi = 300)
setwd("C:/Users/USUARIO/Documents/GitHub/CC_Module2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
mtcars
qplot(mpg, wt, data=mtcars)
ggplot(mtcars, aes(x = mpg, y = wt))
+ geom_point(shape=1)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=1)
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=19)
mtcars$cylFactor <- factor(mtcars$cyl)
ggplot(mtcars, aes(x=mpg,y=wt, shape = cylFactor)) + geom_point()
ggplot(mtcars, aex ( x = mpg, y = wt)) + geom_point(shape=19, colour="blue")
ggplot(mtcars, aes ( x = mpg, y = wt)) + geom_point(shape=19, colour="blue")
ggplot(mtcars, aes(x=mpg,y=wt, color = cyl)) + geom_point(shape=19)
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19)
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + labs(colour = "Cylinders")
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
xlab("Miles per Gallon") +
ylab("Weight") +
labs(colour = "Cylinders") +
ggtitle("Scatterplot")
EuStockDF <- as.data.frame(EuStockMarkets)
EuStockDF
head(EuStockDF)
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) + geom_line()
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) +
geom_line(size = 1.5) +
labs(x = "Stocks")
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) +
geom_line(size = 1.5, colour="light blue") +
labs(x = "Time", y = "Stocks")
head(EuStockDF)
library(dplyr)
dax_smi_plot <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrwo(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") + labs(x = "Time", y = "Stocks")
print(dax_smi_plot)
dax_smi_plot <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") + labs(x = "Time", y = "Stocks")
print(dax_smi_plot)
View(EuStockDF)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
all_stocks <- ggplot()
+ geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue")
all_stocks <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1.5, colour = "purple")+
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1.5, colour = "green") +
labs( x = "Time", y = "Stocks")
print(all_Stocks)
all_stocks <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1.5, colour = "purple")+
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1.5, colour = "green") +
labs( x = "Time", y = "Stocks")
print(all_stocks)
print(all_stocks)
all_stocks <- ggplot() +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1, colour = "light blue") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1, colour = "red") +
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1, colour = "purple")+
geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1, colour = "green") +
labs( x = "Time", y = "Stocks")
print(all_stocks)
legends_stocks <- all_stocs + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
legends_stocks <- all_stocks + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
print(legend_stocks)
legend_stocks <- all_stocks + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")
print(legend_stocks)
ggplot(mtcars, aes(x=mpg,y=wt)) + geom_point(shape=19) + geom_smooth(method="lm", se= FALSE, color = "red")
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt, color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
ggplot(mtcars,aes(x=mpg,y=wt, color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red") + xlab("Miles per Gallon") + ylab("Weight") + labs(colour= "Cylinders") + ggtitle("Linear Regression")
+ ggtitle("Gaussian Regression")
ggplot(mtcars,aes(x=mpg,y=wt,color= cylFactor))
+ geom_point(shape=19)
ggplot(mtcars,aes(x=mpg,y=wt,color= cylFactor)) +
geom_point(shape=19) +
geom_smooth(method="auto", se= TRUE, color = "red")+
xlab("Miles per Gallon") +
ylab("Weight") +
labs(colour= "Cylinders") +
ggtitle("Gaussian Regression")
head(EuStockDF)
