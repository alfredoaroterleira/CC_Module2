---
title: "CC_Module2"
format: 
  html: 
    self-contained: true
editor: visual
autor: Alfredo Aro Terleira
---

## Scatter Plots

### Paso 1: Instalación del paquete `ggplot2`

```{r}
#install.packages("ggplot2")
library(ggplot2)
```

### Paso 2: Presentamos nuestra base de datos

Contiene data desde 1974 y se encuentra en el Motor Trend Car Road Tests. En esta data hay alrededor de 32 autos desde 1973 hasta 1974, y para cada automóvil existen 11 variables en nuestra base de datos.

```{r}
mtcars
```

### Paso 3: Basic scatter plot

-   `mpg` = stands for miles per gallon

-   `wt` = stands for weight

```{r}
qplot(mpg, wt, data=mtcars)
```

### Paso 4: Changing the shape of points

Círculos vacíos

```{r}
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=1)
```

Círculos sólidos

```{r}
ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point(shape=19)
```

### Paso 5: The third variable as a shape

Podemos introducir una tercera variable a nuestro scatter plot. Los automóviles pueden categorizarse por el número de cilidros, así que vamos a usar cada punto para representar eso.

#### 5.1. Creamos un factor para la variable cylinder

```{r}
mtcars$cylFactor <- factor(mtcars$cyl)
```

#### 5.2. Realizamos el gráfico

```{r}
ggplot(mtcars, aes(x=mpg,y=wt, shape = cylFactor)) + geom_point()
```

### Paso 6: Colour

```{r}
ggplot(mtcars, aes ( x = mpg, y = wt)) + geom_point(shape=19, colour="blue")
```

### Paso 7: The third variable as a color

```{r}
ggplot(mtcars, aes(x=mpg,y=wt, color = cyl)) + geom_point(shape=19)
```

Pero, como mencionamos antes, **la variable "cylynder" la entendemos más como factor:**

```{r}
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19)
```

### Paso 8: Labels

```{r}
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) + labs(colour = "Cylinders")
```

### Paso 9: Title

```{r}
ggplot(mtcars, aes(x=mpg,y=wt,color = cylFactor)) + geom_point(shape=19) +
  xlab("Miles per Gallon") +
  ylab("Weight") + 
  labs(colour = "Cylinders") +
  ggtitle("Scatterplot")
```

## Lines Plots and Regression

Vamos a ver Regresión Lineal y Regresión Gausseana

#### Introducción de base de datos `EuStockMarkets`

Este dataset contiene data historial de índices de mercados en Europa

```{r}
EuStockDF <- as.data.frame(EuStockMarkets)
```

Vemos nuestra data

```{r}
head(EuStockDF)
```

### Simple Line Plot

Trabajamos primero con la columna `DAX.`

-   Our **X axis** will simply display the current row number

-   Our **Y axis** will display the DAX data

```{r}
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) + geom_line()
```

#### Paso 1: Line boldness

-   si queremos modificar el grosor

```{r}
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) + 
  geom_line(size = 1.5) + 
  labs(x = "Stocks")
```

#### Paso 2: Add color

```{r}
ggplot(EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX)) + 
  geom_line(size = 1.5, colour="light blue") + 
  labs(x = "Time", y = "Stocks")
```

### Multiple line plots

```{r}
#install.packages("dplyr")
library(dplyr)
```

```{r}
head(EuStockDF)
```

```{r}
dax_smi_plot <- ggplot() +
  geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1.5, colour = "light blue") + 
  geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1.5, colour = "red") + labs(x = "Time", y = "Stocks")
            
print(dax_smi_plot)
```

#### **Utilizamos las 4 variables:**

```{r}
all_stocks <- ggplot() + 
  geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = DAX), size = 1, colour = "light blue") + 
  geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = SMI), size = 1, colour = "red") + 
  geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = CAC), size = 1, colour = "purple")+ 
  geom_line(data = EuStockDF, aes(x=c(1:nrow(EuStockDF)), y = FTSE), size = 1, colour = "green") + 
  labs( x = "Time", y = "Stocks")
  
            
print(all_stocks)
```

#### Agregamos las etiquetas

```{r}
legend_stocks <- all_stocks + xlab("Days") + ylab("Price") + ggtitle("Eu Stocks")

print(legend_stocks)
```

### Linear Regression

-   En este caso nosotros **estamos ploteando "miles per gallon" \~ "weight"**

-   `metohd="lm"` –\> lineal model

```{r}
ggplot(mtcars, aes(x=mpg,y=wt)) + geom_point(shape=19) + geom_smooth(method="lm", se= FALSE, color = "red")
```

#### Paso 2: Confidence interval

-   **Recordar el cylFactor** de la primera parte del documento

-   **The confidence interval (se=TRUE)** is constructed so that the model is 95% certain that a data point would fall inside the bands.

```{r}
#se = TRUE -> confidence interval appear (default = true)
ggplot(mtcars,aes(x=mpg,y=wt, color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red")
```

#### Paso 3: Labels

```{r}
ggplot(mtcars,aes(x=mpg,y=wt, color = cylFactor)) + geom_point(shape=19) + geom_smooth(method="lm", se= TRUE, color= "red") + xlab("Miles per Gallon") + ylab("Weight") + labs(colour= "Cylinders") + ggtitle("Linear Regression")
```

### Gaussian Regression

-   To use this type of model, you simply need to pass the "auto" parameter to the "method" atrribute

```{r}
ggplot(mtcars,aes(x=mpg,y=wt,color= cylFactor)) + 
  geom_point(shape=19) + 
  geom_smooth(method="auto", se= TRUE, color = "red")+ 
  xlab("Miles per Gallon") + 
  ylab("Weight") + 
  labs(colour= "Cylinders") + 
  ggtitle("Gaussian Regression")
```
